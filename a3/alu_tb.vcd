$date
	Fri Sep 18 19:05:20 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_tb $end
$var wire 1 ! d_we $end
$var wire 32 " rvout [31:0] $end
$var wire 32 # rv2 [31:0] $end
$var wire 32 $ rv1 [31:0] $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 5 ' rd [4:0] $end
$var wire 32 ( r_rv2 [31:0] $end
$var wire 6 ) op [5:0] $end
$var wire 5 * d_rs1 [4:0] $end
$var reg 1 + clk $end
$var reg 5 , i_rs1 [4:0] $end
$var reg 32 - instr [31:0] $end
$var reg 1 . sel $end
$var reg 1 / we $end
$var integer 32 0 exp_reg [31:0] $end
$var integer 32 1 fail [31:0] $end
$var integer 32 2 fp [31:0] $end
$var integer 32 3 i [31:0] $end
$var integer 32 4 log_file [31:0] $end
$var integer 32 5 numinstr [31:0] $end
$var integer 32 6 reg_file [31:0] $end
$var integer 32 7 s [31:0] $end
$scope module u1 $end
$var wire 32 8 rv2 [31:0] $end
$var wire 32 9 rv1 [31:0] $end
$var wire 6 : op [5:0] $end
$var reg 32 ; rvout [31:0] $end
$upscope $end
$scope module u2 $end
$var wire 1 + clk $end
$var wire 5 < rs1 [4:0] $end
$var wire 32 = rv1 [31:0] $end
$var wire 32 > rv2 [31:0] $end
$var wire 32 ? wdata [31:0] $end
$var wire 1 / we $end
$var wire 5 @ rs2 [4:0] $end
$var wire 5 A rd [4:0] $end
$var integer 32 B i [31:0] $end
$upscope $end
$scope module u3 $end
$var wire 32 C instr [31:0] $end
$var wire 32 D r_rv2 [31:0] $end
$var wire 1 ! we $end
$var reg 6 E op [5:0] $end
$var reg 5 F rd [4:0] $end
$var reg 5 G rs1 [4:0] $end
$var reg 5 H rs2 [4:0] $end
$var reg 32 I rv2 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx I
bx H
bx G
bx F
bx E
bx D
bx C
b100000 B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
b1 7
b10000000000000000000000000000100 6
b111 5
b10000000000000000000000000000101 4
bx 3
b10000000000000000000000000000011 2
bx 1
bx 0
x/
1.
bx -
bx ,
1+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
1!
$end
#5
b11 "
b11 ;
b11 ?
b0 $
b0 9
b0 =
b1 &
b1 <
b11 #
b11 8
b11 I
b10000 )
b10000 :
b10000 E
b1 '
b1 A
b1 F
b1 *
b1 G
1/
b1100001000000010010011 -
b1100001000000010010011 C
b0 3
0+
#10
b110 "
b110 ;
b110 ?
b11 $
b11 9
b11 =
1+
#15
b111 "
b111 ;
b111 ?
b100 #
b100 8
b100 I
b10000001000000010010011 -
b10000001000000010010011 C
b1 3
0+
#20
b1011 "
b1011 ;
b1011 ?
b111 $
b111 9
b111 =
1+
#25
b101 "
b101 ;
b101 ?
b0 $
b0 9
b0 =
b10 &
b10 <
b101 #
b101 8
b101 I
b10 '
b10 A
b10 F
b10 *
b10 G
b10100010000000100010011 -
b10100010000000100010011 C
b10 3
0+
#30
b1010 "
b1010 ;
b1010 ?
b101 $
b101 9
b101 =
1+
#35
b10 "
b10 ;
b10 ?
b1 #
b1 8
b1 I
b1010 )
b1010 :
b1010 E
b100010101000100010011 -
b100010101000100010011 C
b11 3
0+
#40
b1 "
b1 ;
b1 ?
b10 $
b10 9
b10 =
1+
#45
b101 "
b101 ;
b101 ?
b111 $
b111 9
b111 =
b1 &
b1 <
b10 #
b10 8
b10 I
b10001 )
b10001 :
b10001 E
b10 (
b10 >
b10 D
b10 %
b10 @
b10 H
b11 '
b11 A
b11 F
b1 *
b1 G
b1000000001000001000000110110011 -
b1000000001000001000000110110011 C
b100 3
0+
#50
1+
#55
b11111111111111111111111111111110 "
b11111111111111111111111111111110 ;
b11111111111111111111111111111110 ?
b101 $
b101 9
b101 =
b11 &
b11 <
b111 #
b111 8
b111 I
b111 (
b111 >
b111 D
b1 %
b1 @
b1 H
b100 '
b100 A
b100 F
b11 *
b11 G
b1000000000100011000001000110011 -
b1000000000100011000001000110011 C
b101 3
0+
#60
1+
#65
b0 "
b0 ;
b0 ?
b11111111111111111111111111111110 $
b11111111111111111111111111111110 9
b11111111111111111111111111111110 =
b100 &
b100 <
b10 #
b10 8
b10 I
b111 )
b111 :
b111 E
b10 (
b10 >
b10 D
b10 %
b10 @
b10 H
b101 '
b101 A
b101 F
b100 *
b100 G
b1000100011001010110011 -
b1000100011001010110011 C
b110 3
0+
#70
1+
#75
b1 "
b1 ;
b1 ?
b0 $
b0 9
b0 =
b0 &
b0 <
b0 0
b0 ,
0.
b0 1
0/
b0 3
0+
#80
1+
#85
b0 "
b0 ;
b0 ?
b111 $
b111 9
b111 =
b1 &
b1 <
b111 0
b1 ,
b1 3
0+
#90
1+
#95
b10 $
b10 9
b10 =
b10 &
b10 <
b10 0
b10 ,
b10 3
0+
#100
1+
#105
b101 $
b101 9
b101 =
b11 &
b11 <
b101 0
b11 ,
b11 3
0+
#110
1+
#115
b11111111111111111111111111111110 $
b11111111111111111111111111111110 9
b11111111111111111111111111111110 =
b100 &
b100 <
b11111111111111111111111111111110 0
b100 ,
b100 3
0+
#120
1+
#125
b1 "
b1 ;
b1 ?
b0 $
b0 9
b0 =
b101 &
b101 <
b0 0
b101 ,
b101 3
0+
#130
1+
#135
b110 &
b110 <
b110 ,
b110 3
0+
#140
1+
#145
b111 &
b111 <
b111 ,
b111 3
0+
#150
1+
#155
b1000 &
b1000 <
b1000 ,
b1000 3
0+
#160
1+
#165
b1001 &
b1001 <
b1001 ,
b1001 3
0+
#170
1+
#175
b1010 &
b1010 <
b1010 ,
b1010 3
0+
#180
1+
#185
b1011 &
b1011 <
b1011 ,
b1011 3
0+
#190
1+
#195
b1100 &
b1100 <
b1100 ,
b1100 3
0+
#200
1+
#205
b1101 &
b1101 <
b1101 ,
b1101 3
0+
#210
1+
#215
b1110 &
b1110 <
b1110 ,
b1110 3
0+
#220
1+
#225
b1111 &
b1111 <
b1111 ,
b1111 3
0+
#230
1+
#235
b10000 &
b10000 <
b10000 ,
b10000 3
0+
#240
1+
#245
b10001 &
b10001 <
b10001 ,
b10001 3
0+
#250
1+
#255
b10010 &
b10010 <
b10010 ,
b10010 3
0+
#260
1+
#265
b10011 &
b10011 <
b10011 ,
b10011 3
0+
#270
1+
#275
b10100 &
b10100 <
b10100 ,
b10100 3
0+
#280
1+
#285
b10101 &
b10101 <
b10101 ,
b10101 3
0+
#290
1+
#295
b10110 &
b10110 <
b10110 ,
b10110 3
0+
#300
1+
#305
b10111 &
b10111 <
b10111 ,
b10111 3
0+
#310
1+
#315
b11000 &
b11000 <
b11000 ,
b11000 3
0+
#320
1+
#325
b11001 &
b11001 <
b11001 ,
b11001 3
0+
#330
1+
#335
b11010 &
b11010 <
b11010 ,
b11010 3
0+
#340
1+
#345
b11011 &
b11011 <
b11011 ,
b11011 3
0+
#350
1+
#355
b11100 &
b11100 <
b11100 ,
b11100 3
0+
#360
1+
#365
b11101 &
b11101 <
b11101 ,
b11101 3
0+
#370
1+
#375
b11110 &
b11110 <
b11110 ,
b11110 3
0+
#380
1+
#385
b11111 &
b11111 <
b11111111111111111111111111111111 7
b11111 ,
b11111 3
0+
#390
1+
#395
b100000 3
0+
